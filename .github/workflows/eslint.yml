name: ESLint

on: [push]

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Install packages
        run: yarn install --frozen-lock

      - name: Derive appropriate SHAs for NX
        uses: nrwl/nx-set-shas@v3
        with:
          main-branch-name: "master"

      - name: Lint affected
        id: lint-affected
        run: yarn lint:affected
        continue-on-error: true

      - name: Fail on ESLint errors
        if: steps.lint-affected.outcome != 'success'
        run: exit 1

  create-reports:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"

      - name: Install packages
        run: yarn install --frozen-lock

      - name: Derive appropriate SHAs for NX
        uses: nrwl/nx-set-shas@v3
        with:
          main-branch-name: "master"

      - name: Create ESLint reports from all project
        if: ${{ github.ref_name }} == "master"
        run: yarn eslint-report:all
        continue-on-error: true

      - name: Create ESLint reports for affected projects
        if: ${{ github.ref_name }} != "master"
        run: yarn eslint-report:affected
        continue-on-error: true

      - name: Find report files
        id: reports
        shell: python
        run: |
          import os
          import os.path
          import json
          from glob import glob
          from html.parser import HTMLParser

          class ReportParser(HTMLParser):
            def __init__(self):
              super().__init__()
              self.reset()
              self.data = ""
              self.state = ""
            def handle_starttag(self, tag, attrs):
              if self.state == "stop": return
              if tag == "div":
                for attr_name, attr_value in attrs:
                  if attr_name == "id" and attr_value == "overview":
                    self.state = "div-id-overview"
              if self.state == "div-id-overview" and tag == "span":
                self.state = "div-id-overview-span"
            def handle_data(self, data):
              if self.state == "div-id-overview-span":
                self.data = data
                self.state = "stop"
          
          ref = os.environ["GITHUB_REF_NAME"]
          reports = [_ for _ in glob("*/*/report.html") if "node_modules" not in _]
          reports_created = []
          for r in reports:
            parser = ReportParser()
            parser.feed(open(r).read())
            reports_created.append([r, parser.data])
            dst = os.path.join(ref, r)
            os.makedirs(os.path.dirname(dst))
            print(f"moving file from: {r} to {dst}")
            os.rename(r, dst)
          open(os.environ["GITHUB_ENV"], "a").write(f"REPORTS_CREATED={json.dumps(reports_created)}")

      - name: Publish report
        id: publish-reports
        uses: tmfg/digitraffic-actions@gh-pages-publish/v1
        with:
          GH_PAGES_BRANCH: gh-pages
          FILE_PATH: ${{ github.ref_name }}/
          COMMIT_MESSAGE: ESLint report in branch $CURRENT_BRANCH
          SKIP_LINK: true

      - name: Create summary
        if: steps.publish-reports.outcome == 'success'
        shell: python
        run: |
          import os
          import json
          reports_created = json.loads(os.environ["REPORTS_CREATED"])
          (org, repo) = os.environ["GITHUB_REPOSITORY"].split("/")
          project = lambda x: "/".join(x.split()[-1:])
          status = lambda x: "ðŸŸ¢" if x == "0 problems" else "ðŸŸ " if "0 errors" in x else "ðŸ”´"
          summary = [f"{status(s)} ESLint report for [{project(r)}](https://{org}.github.io/{repo}/{r}) ({s})" for (r, s) in reports_created]
          open(os.environ["GITHUB_STEP_SUMMARY"], "a").write("\n".join(summary))
